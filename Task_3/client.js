const WebSocket = require("ws");
const ws = new WebSocket("ws:/localhost:4000/wsserver");
const duplex = new WebSocket.createWebSocketStream(ws, {encoding: "utf8"});

process.stdout.write("Write your message to the server\n");

ws.on("open", () => {
  duplex.pipe(process.stdout)
  process.stdin.pipe(duplex);
});

/*
Поток Duplex является одновременно и Readable и Writable потоком.
То есть в дуплексный поток можно записывать информацию и считывать её.
Метод pipe используется для передачи данных из одного потока в другой.

1) Из дуплекса данные(переданные сервером) передаются в поток process.stdout клиента и выводятся в его консоли
2) Когда клиент напишет что-то в консоли, то данные из потока process.stdin передаются в дуплексный поток
 и таким образом отправляются серверу

Вообще, насколько я понял, смысл использования потоков в том, что: 
Потоки отправляют (обмениваются) данные частями (так называемыми чанками, chunk).
Таким образом серверу(к примеру) не надо будет выделять и заполнять оперативную память с размером целого файла.
Он будет действовать так: прочитал кусочек файл => отправил этот чанк клиенту, память свою освбодил.
И также это даёт прибавку к скорости передачи и принятия это файла на стороне клиента.

И если использовать другие функции(методы) например для чтения файла, то они будут работать примерно так:
Сперва сервер должен будет прочесть весь файл (и например он на 100мб), прежде чем отправить его клиенту.
Пока файл будет считываться, в это время сервер выделяет и заполняет оперативную память(до 100 мб) под этот файл. 
А это слишком ресурсозатратно. Ведь файлы и их количество одновременного чтения могут быть огромными.
*/